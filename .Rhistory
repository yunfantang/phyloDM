IntegrandF = function(x) f_1(x,df[2])*(1-F_2s(w-x,df[1]))*(1-F_2s(w-x,df[3]))
cuhre(ndim=1,ncomp=1,integrand=IntegrandF,lower=0,upper=w,max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
Pe_112234 = function(df){
IntegrandF = function(x) f_1(x,df[2])*(1-F_2s(w-x,df[1]))*(1-F_1_1s(w-x,df[3],df[4]))
cuhre(ndim=1,ncomp=1,integrand=IntegrandF,lower=0,upper=w,max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
Pe_123114 = function(df) {
IntegrandF = function(x) f_2(x,df[1])*(1-F_1_1s(w-x[1],df[2],df[3]))*(1-F_1(w-sum(x),df[4]))
cuhre(ndim=2,ncomp=1,integrand=IntegrandF,lower=rep(0,2),upper=rep(w,2),max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
Pe_123144 = function(df){
IntegrandF = function(x) f_1(x,df[1])*(1-F_1_1s(w-x,df[2],df[3]))*(1-F_2s(w-x,df[4]))
cuhre(ndim=1,ncomp=1,integrand=IntegrandF,lower=0,upper=w,max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
Pe_123145 = function(df){
IntegrandF = function(x) f_1(x,df[1])*(1-F_1_1s(w-x,df[2],df[3]))*(1-F_1_1s(w-x,df[4],df[5]))
cuhre(ndim=1,ncomp=1,integrand=IntegrandF,lower=0,upper=w,max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
GenericP = function(type, ldf){
HashKey = paste(type, paste(ldf, collapse = "-"))
if(is.na(GenericP_hm[[HashKey]])){
PFunc = switch(type, "112"=P_112,"123"=P_123, "112122"=P_112122,"112113"=P_112113,"112123"=P_112123,"123112"=P_123112,"123124"=P_123124,"112122123"=P_112122123,"112123124"=P_112123124,"123112122"=P_123112122,"123122124"=P_123122124)
GenericP_hm[[HashKey]] <<- PFunc(ldf)
}
GenericP_hm[[HashKey]]
}
GenericPe = function(type, ldf){
HashKey = paste(type, paste(ldf, collapse = "-"))
if(is.na(GenericPe_hm[[HashKey]])){
PeFunc = switch(type, "e112113"=Pe_112113, "e112133"=Pe_112133,"e112134"=Pe_112134,"e112223"=Pe_112223,"e112233"=Pe_112233,"e112234"=Pe_112234,"e123114"=Pe_123114,"e123144"=Pe_123144,"e123145"=Pe_123145)
GenericPe_hm[[HashKey]] <<- PeFunc(ldf)
}
GenericPe_hm[[HashKey]]
}
Ps = function(l1, l2, labeldf){
cl = intersect(l1, l2)
ll1 = l1[-which(l1==cl)]; ll2 = l2[-which(l2==cl)]
componentf = function(x, ll){
if(length(ll)==1) 1-F_1(w-x,labeldf[ll])
else if(length(ll)==2 && length(unique(ll))==2) 1-F_1_1s(w-x,labeldf[ll[1]],labeldf[ll[2]])
else if(length(ll)==2 && length(unique(ll))==1) 1-F_2s(w-x,labeldf[ll[1]])
}
if( sum(l1==cl)+sum(l2==cl) == 3){
IntegrandF = function(x) f3132s(x)*componentf(x[1],ll1)*componentf(x[2],ll2)
}else if (sum(l1==cl)+sum(l2==cl) == 2){
IntegrandF = function(x) f_2(x,labeldf[cl])*componentf(x[1],ll1)*componentf(x[2],ll2)}
cuhre(ndim=2,ncomp=1,integrand=IntegrandF,lower=rep(0,2),upper=rep(w,2),max.eval=5e7,flags=list(verbose=0))$value
}
IndepProb = function(l){
if(length(unique(l))==3) {
HashKey = paste("123", paste(sort(labeldf[l]), collapse = '-'))
if(is.na(IndepProb_hm[[HashKey]]))
IndepProb_hm[[HashKey]] = P_123(labeldf[l])
return(IndepProb_hm[[HashKey]])
}
dup = l[duplicated(l)]
cl = c(dup, setdiff(l,dup))
HashKey = paste("112", paste(labeldf[cl], collapse='-'))
if(is.na(IndepProb_hm[[HashKey]]))
IndepProb_hm[[HashKey]] <<- P_112(labeldf[cl])
IndepProb_hm[[HashKey]]
}
GenericP_hm = hashmap("", 0)
GenericPe_hm = hashmap("", 0)
IndepProb_hm = hashmap("", 0)
label = initLabel(pstrct)
labeldf = sapply(1:length(unique(label)), function(x)sum(label==x))
G3 = initGroup3(label, pstrct)
if(is.vector(G3)) G3 = matrix(G3, nrow=1)
Interaction2 = initInteraction2(G3, label)
Interaction1 = initInteraction1(G3, label)
Interaction0 = initInteraction0(G3, label)
Indep = initIndep(G3, label)
int2Verify = function(n)  ifelse(length(Interaction2[[n]])==1, 0,  length(Interaction2[[n]])/3)
psum = sapply(1:nrow(G3), function(n)length(Interaction0[[n]])+length(Interaction1[[n]])+int2Verify(n)+length(Indep[[n]]))
if( !all(psum == 0:(nrow(G3)-1)))
stop("Triplet initialization error")
ts1 = proc.time()
IntGrid = seq(gridInc,ceiling(w*invGP)*gridInc,by=gridInc)
IntGrids2 = seq(gridInc,ceiling(2*w*invGP)*gridInc,by=gridInc)
pchisqC3 = pchisq(w,3)
pchisqC2 = pchisq(w,2)
pchisqC1 = pchisq(w,1)
F31_g = vapply(IntGrid, function(upper){ integrate(f31, 0, upper, subdivisions = 1e+06, rel.tol = btol, abs.tol = 0)$value}, numeric(1) )
F21_g = vapply(IntGrid, function(upper){ integrate(f21, 0, upper, subdivisions = 1e+06, rel.tol = btol, abs.tol = 0)$value}, numeric(1) )
F32s_g = vapply(IntGrid, function(upper){ integrate(f32_s, 0, upper, subdivisions = 1e+06, rel.tol = btol, abs.tol = 0)$value}, numeric(1) )
if(verbose) message("Stage I: 1/7 complete")
cl = makeCluster(nthread)
registerDoParallel(cl)
ig2 = round(seq(1, length(IntGrids2)+1, len = nthread + 1))
#F3131s_g = unlist(foreach(u=IntGrids2)%dopar%{integrate(function(x) vapply(x, function(xx)f31(xx)*F_1(u-xx,3), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value})
F3131s_g <- unlist(foreach(k = 1:nthread) %dopar% {
lseq <- IntGrids2[ig2[k]:(ig2[k + 1] - 1)]
unlist(lapply(lseq, function(u) integrate(function(x) vapply(x, function(xx)f31(xx)*F_1(u-xx,3), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value ))
})
if(verbose) message("Stage I: 2/7 complete")
#F3121s_g = unlist(foreach(u=IntGrids2)%dopar%{integrate(function(x) vapply(x, function(xx)f31(xx)*F_1(u-xx,2), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value})
F3121s_g <- unlist(foreach(k = 1:nthread) %dopar% {
lseq <- IntGrids2[ig2[k]:(ig2[k + 1] - 1)]
unlist(lapply(lseq, function(u) integrate(function(x) vapply(x, function(xx)f31(xx)*F_1(u-xx,2), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value ))
})
if(verbose) message("Stage I: 3/7 complete")
#F3111s_g = unlist(foreach(u=IntGrids2)%dopar%{integrate(function(x) vapply(x, function(xx)f31(xx)*F_1(u-xx,1), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value})
F3111s_g <- unlist(foreach(k = 1:nthread) %dopar% {
lseq <- IntGrids2[ig2[k]:(ig2[k + 1] - 1)]
unlist(lapply(lseq, function(u) integrate(function(x) vapply(x, function(xx)f31(xx)*F_1(u-xx,1), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value ))
})
if(verbose) message("Stage I: 4/7 complete")
#F2121s_g = unlist(foreach(u=IntGrids2)%dopar%{integrate(function(x) vapply(x, function(xx)f21(xx)*F_1(u-xx,2), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value})
F2121s_g <- unlist(foreach(k = 1:nthread) %dopar% {
lseq <- IntGrids2[ig2[k]:(ig2[k + 1] - 1)]
unlist(lapply(lseq, function(u) integrate(function(x) vapply(x, function(xx)f21(xx)*F_1(u-xx,2), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value ))
})
if(verbose) message("Stage I: 5/7 complete")
#F2111s_g = unlist(foreach(u=IntGrids2)%dopar%{integrate(function(x) vapply(x, function(xx)f21(xx)*F_1(u-xx,1), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value})
F2111s_g <- unlist(foreach(k = 1:nthread) %dopar% {
lseq <- IntGrids2[ig2[k]:(ig2[k + 1] - 1)]
unlist(lapply(lseq, function(u) integrate(function(x) vapply(x, function(xx)f21(xx)*F_1(u-xx,1), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value ))
})
if(verbose) message("Stage I: 6/7 complete")
#F1111s_g = unlist(foreach(u=IntGrids2)%dopar%{integrate(function(x) vapply(x, function(xx)f11(xx)*F_1(u-xx,1), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value})
F1111s_g <- unlist(foreach(k = 1:nthread) %dopar% {
lseq <- IntGrids2[ig2[k]:(ig2[k + 1] - 1)]
unlist(lapply(lseq, function(u) integrate(function(x) vapply(x, function(xx)f11(xx)*F_1(u-xx,1), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value ))
})
if(verbose) message("Stage I: 7/7 complete")
stopCluster(cl)
if(verbose) message("Stage I running time: ", round((proc.time() - ts1)[3]), "s")
ts2 = proc.time()
GridCProb = prod(unlist(lapply(labeldf,function(x)pchisq(w,x))))
Pu = 1-GridCProb
for(i in 1:length(Interaction2)){
CP = GenericP(attributes(Interaction2[[i]])$type, labeldf[attributes(Interaction2[[i]])$idxdist] )
Pu = Pu + GridCProb*CP
}
if(verbose) message("Stage II: 1/4 complete")
Eu_int1 = 0
for(i in 1:nrow(G3)){
if(length(Interaction1[[i]])==0) next
for(j in Interaction1[[i]]) {
CP = GenericPe(attributes(j)$type, labeldf[attributes(j)$idxdist])
Eu_int1 = Eu_int1 + GridCProb*CP
}
}
if(verbose) message("Stage II: 2/4 complete")
cl = makeCluster(nthread)
registerDoParallel(cl)
Pu3 = unlist(foreach(i=1:nrow(G3), .export=c("cuhre")) %dopar% {
if(length(Interaction0[[i]])==0) return (0)
temp = 0
for(j in Interaction0[[i]])
temp = temp + Ps(label[G3[i,]], label[j], labeldf)
GridCProb*temp
})
stopCluster(cl)
Eu_int0 = sum(Pu3)
if(verbose) message("Stage II: 3/4 complete")
Eu_indep = 0
for(i in 1:nrow(G3)){
if(length(Indep[[i]])==0) next
for(j in Indep[[i]])  {
Eu_indep = Eu_indep + GridCProb*IndepProb(label[G3[i,]])*IndepProb(label[j])
}
}
if(verbose) message("Stage II: 4/4 complete")
if(verbose) message("Stage II running time: ", round((proc.time() - ts2)[3]), "s")
list(Pu = min(1, Pu), Pl = Pu-(Eu_int1+Eu_int0+Eu_indep))
}
nodetest = function(pstrct, group.data){
phylotree = pstrct$phylotree
phyloparent = pstrct$phyloparent
phylochildren = pstrct$phylochildren
MoMp = matrix(0, phylotree$Nnode, 2, dimnames = list(c(), c("Node", "p-value")))
for(gd in group.data)
if(ncol(gd) != ntaxa(pstrct$phylotree))
stop("Number of columns in group.data is not equal to number of leaves")
for(i in 1:phylotree$Nnode){
NodeID = i+ntaxa(phylotree)
c1 = phylochildren[NodeID, 1]
c2 = phylochildren[NodeID, 2]
gp = lapply(group.data, function(g) {
k1 = g[,pstrct$descendant[c1,]]
k2 = g[,pstrct$descendant[c2,]]
if(is.matrix(k1)) k1 = rowSums(k1)
if(is.matrix(k2)) k2 = rowSums(k2)
tm = cbind(k1, k2)
tm[rowSums(tm)!=0, ]})
MoMp[i,] = c(NodeID, Xmcupo.sevsample(gp)$`p value`)
}
ts = matrix(0, phylotree$Nnode, 4, dimnames = list(c(), c("Node1", "Node2", "Node3", "stat")))
for(i in 2:phylotree$Nnode){
NodeID = i+ntaxa(phylotree)
Par = phyloparent[NodeID]
GPar = phyloparent[Par]
if(GPar==0) next
ts[i,1:3] = c(GPar,Par,NodeID)
ts[i,4] = sum(qchisq(1-MoMp[c(NodeID,Par,GPar)-ntaxa(phylotree),2],1))
}
ts = ts[rowSums(ts[,1:3])!=0, ]
list(MoMp=MoMp, tripletstat=ts, w=max(ts[,4]))
}
pstrct = phylostructure(PT)
nt = nodetest(pstrct, list(x=t(OTSample1), y=t(OTSample2)))
nt$w
result = tailprob(pstrct, nt$w, nthread = 4)
tailprob = function(pstrct, w, nthread, verbose = TRUE, gridInc = 1e-3, reltol = 1e-3, btol = 1e-6){
psn = 1e-9
invGP = round(1/gridInc)
dchisqM = function(x, df){
if(df>1) return (dchisq(x,df))
else {
x[x<0] = -1
x[(x>=0) &(x<psn)] = psn
dchisq(x,df)
}
}
f31 = function(x) pchisq(w-x,2)*dchisqM(x,1)/pchisqC3
f21 = function(x) pchisq(w-x,1)*dchisqM(x,1)/pchisqC2
f11 = function(x) (x<w)*dchisqM(x,1)/pchisqC1
f32 = function(x) pchisq(w-sum(x),1)*prod(dchisqM(x,1))/pchisqC3
f32s = function(x) pchisq(w-x,1)*dchisqM(x,2)/pchisqC3
f22 = function(x) (sum(x)<w)*prod(dchisqM(x,1))/pchisqC2
f22s = function(x) (x<w)*dchisqM(x,2)/pchisqC2
f33 = function(x) (sum(x)<w)*prod(dchisqM(x,1))/pchisqC3
f3132s = function(x) (sum(x)<w)*dchisqM(x[1],1)*dchisqM(x[2],2)/pchisqC3
f_1 = function(x,d) switch(d, f11(x),f21(x),f31(x))
f_2 = function(x,d) switch(d-1, f22(x), f32(x))
f_2s = function(x,d) switch(d-1, f22s(x), f32s(x))
CDFappx = function(val){
tm = val * invGP
s1 = floor(tm)
if(s1 == tm) return (c(s1, s1, gridInc, 0))
s2 = s1 + 1
c(s1, s2, IntGrids2[s2]-val, val-IntGrids2[s1])
}
F_1_1s = function(x,d1,d2){
if(x>=2*w-psn) return (1)
if(x<psn) return (0)
dd = paste(d1,d2, sep="")
Fg = switch(dd, "33"=F3131s_g, "32"=F3121s_g, "23"=F3121s_g, "22"=F2121s_g, "21"=F2111s_g, "12"=F2111s_g, "31"=F3111s_g, "13"=F3111s_g, "11"=F1111s_g)
if(x<gridInc) return(Fg[1]*x*invGP )
tc = CDFappx(x)
sum( Fg[tc[1:2]] * tc[3:4] ) * invGP
}
F_2s = function(x,d){
if(x>=w-psn) return (1)
if(x<psn) return (0)
if(x<gridInc) return(switch(d-1, pchisq(x,2)/pchisq(w,2),F32s_g[1]*x*invGP))
tc = CDFappx(x)
switch(d-1, pchisq(x,2)/pchisq(w,2),sum(F32s_g[tc[1:2]] * tc[3:4]) * invGP)
}
F_1 = function(x,d){
if(x>=w-psn) return (1)
if(x<psn) return (0)
if(x<gridInc) return(switch(d, pchisq(x,1)/pchisq(w,1), F21_g[1]*x*invGP, F31_g[1]*x*invGP))
tc = CDFappx(x)
switch(d, pchisq(x,1)/pchisq(w,1), sum(F21_g[tc[1:2]]*tc[3:4])*invGP,sum(F31_g[tc[1:2]]*tc[3:4])*invGP)
}
f11_a = function(x,a) (x<a)*dchisqM(x,1)/pchisq(a,1)
f21_a = function(x,a) pchisq(a-x,1)*dchisqM(x,1)/pchisq(a,2)
f31_a = function(x,a) pchisq(a-x,2)*dchisqM(x,1)/pchisq(a,3)
f_1_a = function(x,a,df) switch(df, f11_a(x,a), f21_a(x,a), f31_a(x,a))
F_1_a = function(x,a,df){
if(x<=0) return (0) else if (x>a) return (1)
ff = switch(df, f11_a, f21_a, f31_a)
integrate(function(y)ff(y,a),0,x,subdivisions=1e5,rel.tol=reltol,abs.tol=0)$value
}
P_112 = function(df){
IntegrandF = function(x) f_1(x,df[2])*(1-F_2s(w-x,df[1]))
cuhre(ndim=1,ncomp=1,integrand=IntegrandF,lower=0,upper=w,max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
P_123 = function(df){
IntegrandF = function(x) f_1(x,df[1])*(1-F_1_1s(w-x,df[2],df[3]))
cuhre(ndim=1,ncomp=1,integrand=IntegrandF,lower=0,upper=w,max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
P_112122 = function(df){
IntegrandFa = function(x) f_1(x[1],df[1])*f_1(x[2],df[2])*(1-F_1_a(w-sum(x),w-x[1],df[1]-1))*F_1_a(w-sum(x),w-x[2],df[2]-1)
cuhre(ndim=2,ncomp=1,integrand=IntegrandFa,lower=rep(0,2),upper=rep(w,2),max.eval=5e7, flags=list(verbose=0),rel.tol=reltol)$value
}
P_112113 = function(df){
IntegrandF = function(x) f_2(x,df[1])*(1-F_1(w-sum(x),df[2]))*F_1(w-sum(x),df[3])
cuhre(ndim=2,ncomp=1,integrand=IntegrandF,lower=rep(0,2),upper=rep(w,2),max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
P_112123 = function(df){
IntegrandFa = function(x) f_1(x[1],df[1])*f_1(x[2],df[2])*(1-F_1_a(w-sum(x),w-x[1],df[1]-1))*F_1(w-sum(x),df[3])
cuhre(ndim=2,ncomp=1,integrand=IntegrandFa,lower=rep(0,2),upper=rep(w,2),max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
P_123112 = function(df){
IntegrandFa = function(x) f_1(x[1],df[1])*f_1(x[2],df[2])*F_1_a(w-sum(x),w-x[1],df[1]-1)*(1-F_1(w-sum(x),df[3]))
cuhre(ndim=2,ncomp=1,integrand=IntegrandFa,lower=rep(0,2),upper=rep(w,2),max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
P_123124 = function(df){
IntegrandF = function(x) f_1(x[1],df[1])*f_1(x[2],df[2])*(1-F_1(w-sum(x),df[3]))*F_1(w-sum(x),df[4])
cuhre(ndim=2,ncomp=1,integrand=IntegrandF,lower=rep(0,2),upper=rep(w,2),max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
P_112122123 = function(df){
IntegrandFa = function(x) f_1(x[1],df[1])*f_1(x[2],df[2])*(1-F_1_a(w-sum(x),w-x[1],df[1]-1))*F_1_a(w-sum(x),w-x[2],df[2]-1)*F_1(w-sum(x),df[3])
cuhre(ndim=2,ncomp=1,integrand=IntegrandFa,lower=rep(0,2),upper=rep(w,2),max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
P_112123124 = function(df){
IntegrandFa = function(x) f_1(x[1],df[1])*f_1(x[2],df[2])*(1-F_1_a(w-sum(x),w-x[1],df[1]-1))*F_1(w-sum(x),df[3])*F_1(w-sum(x),df[4])
cuhre(ndim=2,ncomp=1,integrand=IntegrandFa,lower=rep(0,2),upper=rep(w,2),max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
P_123112122 = function(df){
IntegrandFa = function(x) f_1(x[1],df[1])*f_1(x[2],df[2])*(1-F_1(w-sum(x),df[3]))*F_1_a(w-sum(x),w-x[1],df[1]-1)*F_1_a(w-sum(x),w-x[2],df[2]-1)
cuhre(ndim=2,ncomp=1,integrand=IntegrandFa,lower=rep(0,2),upper=rep(w,2),max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
P_123122124 = function(df){
IntegrandFa = function(x) f_1(x[1],df[1])*f_1(x[2],df[2])*(1-F_1(w-sum(x),df[3]))*F_1_a(w-sum(x),w-x[2],df[2]-1)*F_1(w-sum(x),df[4])
cuhre(ndim=2,ncomp=1,integrand=IntegrandFa,lower=rep(0,2),upper=rep(w,2),max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
Pe_112113 = function(df){
IntegrandF = function(x) f33(x)*(1-F_1(w-x[1]-x[2],df[2]))*(1-F_1(w-x[2]-x[3],df[3]))
suave(ndim=3,ncomp=1,integrand=IntegrandF,lower=rep(0,3),upper=rep(w,3),max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
Pe_112133 = function(df){
IntegrandF = function(x) f_2(x,df[1])*(1-F_1(w-sum(x),df[2]))*(1-F_2s(w-x[2],df[3]))
cuhre(ndim=2,ncomp=1,integrand=IntegrandF,lower=rep(0,2),upper=rep(w,2),max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
Pe_112134 = function(df){
IntegrandF = function(x) f_2(x,df[1])*(1-F_1(w-sum(x),df[2]))*(1-F_1_1s(w-x[2],df[3],df[4]))
cuhre(ndim=2,ncomp=1,integrand=IntegrandF,lower=rep(0,2),upper=rep(w,2),max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
Pe_112223 = function(df){
IntegrandF = function(x) f_2(x,df[2])*(1-F_2s(w-x[1],df[1]))*(1-F_1(w-sum(x),df[3]))
cuhre(ndim=2,ncomp=1,integrand=IntegrandF,lower=rep(0,2),upper=rep(w,2),max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
Pe_112233 = function(df){
IntegrandF = function(x) f_1(x,df[2])*(1-F_2s(w-x,df[1]))*(1-F_2s(w-x,df[3]))
cuhre(ndim=1,ncomp=1,integrand=IntegrandF,lower=0,upper=w,max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
Pe_112234 = function(df){
IntegrandF = function(x) f_1(x,df[2])*(1-F_2s(w-x,df[1]))*(1-F_1_1s(w-x,df[3],df[4]))
cuhre(ndim=1,ncomp=1,integrand=IntegrandF,lower=0,upper=w,max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
Pe_123114 = function(df) {
IntegrandF = function(x) f_2(x,df[1])*(1-F_1_1s(w-x[1],df[2],df[3]))*(1-F_1(w-sum(x),df[4]))
cuhre(ndim=2,ncomp=1,integrand=IntegrandF,lower=rep(0,2),upper=rep(w,2),max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
Pe_123144 = function(df){
IntegrandF = function(x) f_1(x,df[1])*(1-F_1_1s(w-x,df[2],df[3]))*(1-F_2s(w-x,df[4]))
cuhre(ndim=1,ncomp=1,integrand=IntegrandF,lower=0,upper=w,max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
Pe_123145 = function(df){
IntegrandF = function(x) f_1(x,df[1])*(1-F_1_1s(w-x,df[2],df[3]))*(1-F_1_1s(w-x,df[4],df[5]))
cuhre(ndim=1,ncomp=1,integrand=IntegrandF,lower=0,upper=w,max.eval=5e7,flags=list(verbose=0),rel.tol=reltol)$value
}
GenericP = function(type, ldf){
HashKey = paste(type, paste(ldf, collapse = "-"))
if(is.na(GenericP_hm[[HashKey]])){
PFunc = switch(type, "112"=P_112,"123"=P_123, "112122"=P_112122,"112113"=P_112113,"112123"=P_112123,"123112"=P_123112,"123124"=P_123124,"112122123"=P_112122123,"112123124"=P_112123124,"123112122"=P_123112122,"123122124"=P_123122124)
GenericP_hm[[HashKey]] <<- PFunc(ldf)
}
GenericP_hm[[HashKey]]
}
GenericPe = function(type, ldf){
HashKey = paste(type, paste(ldf, collapse = "-"))
if(is.na(GenericPe_hm[[HashKey]])){
PeFunc = switch(type, "e112113"=Pe_112113, "e112133"=Pe_112133,"e112134"=Pe_112134,"e112223"=Pe_112223,"e112233"=Pe_112233,"e112234"=Pe_112234,"e123114"=Pe_123114,"e123144"=Pe_123144,"e123145"=Pe_123145)
GenericPe_hm[[HashKey]] <<- PeFunc(ldf)
}
GenericPe_hm[[HashKey]]
}
Ps = function(l1, l2, labeldf){
cl = intersect(l1, l2)
ll1 = l1[-which(l1==cl)]; ll2 = l2[-which(l2==cl)]
componentf = function(x, ll){
if(length(ll)==1) 1-F_1(w-x,labeldf[ll])
else if(length(ll)==2 && length(unique(ll))==2) 1-F_1_1s(w-x,labeldf[ll[1]],labeldf[ll[2]])
else if(length(ll)==2 && length(unique(ll))==1) 1-F_2s(w-x,labeldf[ll[1]])
}
if( sum(l1==cl)+sum(l2==cl) == 3){
IntegrandF = function(x) f3132s(x)*componentf(x[1],ll1)*componentf(x[2],ll2)
}else if (sum(l1==cl)+sum(l2==cl) == 2){
IntegrandF = function(x) f_2(x,labeldf[cl])*componentf(x[1],ll1)*componentf(x[2],ll2)}
cuhre(ndim=2,ncomp=1,integrand=IntegrandF,lower=rep(0,2),upper=rep(w,2),max.eval=5e7,flags=list(verbose=0))$value
}
IndepProb = function(l){
if(length(unique(l))==3) {
HashKey = paste("123", paste(sort(labeldf[l]), collapse = '-'))
if(is.na(IndepProb_hm[[HashKey]]))
IndepProb_hm[[HashKey]] = P_123(labeldf[l])
return(IndepProb_hm[[HashKey]])
}
dup = l[duplicated(l)]
cl = c(dup, setdiff(l,dup))
HashKey = paste("112", paste(labeldf[cl], collapse='-'))
if(is.na(IndepProb_hm[[HashKey]]))
IndepProb_hm[[HashKey]] <<- P_112(labeldf[cl])
IndepProb_hm[[HashKey]]
}
GenericP_hm = hashmap("", 0)
GenericPe_hm = hashmap("", 0)
IndepProb_hm = hashmap("", 0)
label = initLabel(pstrct)
labeldf = sapply(1:length(unique(label)), function(x)sum(label==x))
G3 = initGroup3(label, pstrct)
if(is.vector(G3)) G3 = matrix(G3, nrow=1)
Interaction2 = initInteraction2(G3, label)
Interaction1 = initInteraction1(G3, label)
Interaction0 = initInteraction0(G3, label)
Indep = initIndep(G3, label)
int2Verify = function(n)  ifelse(length(Interaction2[[n]])==1, 0,  length(Interaction2[[n]])/3)
psum = sapply(1:nrow(G3), function(n)length(Interaction0[[n]])+length(Interaction1[[n]])+int2Verify(n)+length(Indep[[n]]))
if( !all(psum == 0:(nrow(G3)-1)))
stop("Triplet initialization error")
ts1 = proc.time()
IntGrid = seq(gridInc,ceiling(w*invGP)*gridInc,by=gridInc)
IntGrids2 = seq(gridInc,ceiling(2*w*invGP)*gridInc,by=gridInc)
pchisqC3 = pchisq(w,3)
pchisqC2 = pchisq(w,2)
pchisqC1 = pchisq(w,1)
F31_g = vapply(IntGrid, function(upper){ integrate(f31, 0, upper, subdivisions = 1e+06, rel.tol = btol, abs.tol = 0)$value}, numeric(1) )
F21_g = vapply(IntGrid, function(upper){ integrate(f21, 0, upper, subdivisions = 1e+06, rel.tol = btol, abs.tol = 0)$value}, numeric(1) )
F32s_g = vapply(IntGrid, function(upper){ integrate(f32s, 0, upper, subdivisions = 1e+06, rel.tol = btol, abs.tol = 0)$value}, numeric(1) )
if(verbose) message("Stage I: 1/7 complete")
cl = makeCluster(nthread)
registerDoParallel(cl)
ig2 = round(seq(1, length(IntGrids2)+1, len = nthread + 1))
#F3131s_g = unlist(foreach(u=IntGrids2)%dopar%{integrate(function(x) vapply(x, function(xx)f31(xx)*F_1(u-xx,3), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value})
F3131s_g <- unlist(foreach(k = 1:nthread) %dopar% {
lseq <- IntGrids2[ig2[k]:(ig2[k + 1] - 1)]
unlist(lapply(lseq, function(u) integrate(function(x) vapply(x, function(xx)f31(xx)*F_1(u-xx,3), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value ))
})
if(verbose) message("Stage I: 2/7 complete")
#F3121s_g = unlist(foreach(u=IntGrids2)%dopar%{integrate(function(x) vapply(x, function(xx)f31(xx)*F_1(u-xx,2), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value})
F3121s_g <- unlist(foreach(k = 1:nthread) %dopar% {
lseq <- IntGrids2[ig2[k]:(ig2[k + 1] - 1)]
unlist(lapply(lseq, function(u) integrate(function(x) vapply(x, function(xx)f31(xx)*F_1(u-xx,2), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value ))
})
if(verbose) message("Stage I: 3/7 complete")
#F3111s_g = unlist(foreach(u=IntGrids2)%dopar%{integrate(function(x) vapply(x, function(xx)f31(xx)*F_1(u-xx,1), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value})
F3111s_g <- unlist(foreach(k = 1:nthread) %dopar% {
lseq <- IntGrids2[ig2[k]:(ig2[k + 1] - 1)]
unlist(lapply(lseq, function(u) integrate(function(x) vapply(x, function(xx)f31(xx)*F_1(u-xx,1), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value ))
})
if(verbose) message("Stage I: 4/7 complete")
#F2121s_g = unlist(foreach(u=IntGrids2)%dopar%{integrate(function(x) vapply(x, function(xx)f21(xx)*F_1(u-xx,2), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value})
F2121s_g <- unlist(foreach(k = 1:nthread) %dopar% {
lseq <- IntGrids2[ig2[k]:(ig2[k + 1] - 1)]
unlist(lapply(lseq, function(u) integrate(function(x) vapply(x, function(xx)f21(xx)*F_1(u-xx,2), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value ))
})
if(verbose) message("Stage I: 5/7 complete")
#F2111s_g = unlist(foreach(u=IntGrids2)%dopar%{integrate(function(x) vapply(x, function(xx)f21(xx)*F_1(u-xx,1), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value})
F2111s_g <- unlist(foreach(k = 1:nthread) %dopar% {
lseq <- IntGrids2[ig2[k]:(ig2[k + 1] - 1)]
unlist(lapply(lseq, function(u) integrate(function(x) vapply(x, function(xx)f21(xx)*F_1(u-xx,1), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value ))
})
if(verbose) message("Stage I: 6/7 complete")
#F1111s_g = unlist(foreach(u=IntGrids2)%dopar%{integrate(function(x) vapply(x, function(xx)f11(xx)*F_1(u-xx,1), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value})
F1111s_g <- unlist(foreach(k = 1:nthread) %dopar% {
lseq <- IntGrids2[ig2[k]:(ig2[k + 1] - 1)]
unlist(lapply(lseq, function(u) integrate(function(x) vapply(x, function(xx)f11(xx)*F_1(u-xx,1), numeric(1)), 0, u, subdivisions = 1e6, abs.tol=0)$value ))
})
if(verbose) message("Stage I: 7/7 complete")
stopCluster(cl)
if(verbose) message("Stage I running time: ", round((proc.time() - ts1)[3]), "s")
ts2 = proc.time()
GridCProb = prod(unlist(lapply(labeldf,function(x)pchisq(w,x))))
Pu = 1-GridCProb
for(i in 1:length(Interaction2)){
CP = GenericP(attributes(Interaction2[[i]])$type, labeldf[attributes(Interaction2[[i]])$idxdist] )
Pu = Pu + GridCProb*CP
}
if(verbose) message("Stage II: 1/4 complete")
Eu_int1 = 0
for(i in 1:nrow(G3)){
if(length(Interaction1[[i]])==0) next
for(j in Interaction1[[i]]) {
CP = GenericPe(attributes(j)$type, labeldf[attributes(j)$idxdist])
Eu_int1 = Eu_int1 + GridCProb*CP
}
}
if(verbose) message("Stage II: 2/4 complete")
cl = makeCluster(nthread)
registerDoParallel(cl)
Pu3 = unlist(foreach(i=1:nrow(G3), .export=c("cuhre")) %dopar% {
if(length(Interaction0[[i]])==0) return (0)
temp = 0
for(j in Interaction0[[i]])
temp = temp + Ps(label[G3[i,]], label[j], labeldf)
GridCProb*temp
})
stopCluster(cl)
Eu_int0 = sum(Pu3)
if(verbose) message("Stage II: 3/4 complete")
Eu_indep = 0
for(i in 1:nrow(G3)){
if(length(Indep[[i]])==0) next
for(j in Indep[[i]])  {
Eu_indep = Eu_indep + GridCProb*IndepProb(label[G3[i,]])*IndepProb(label[j])
}
}
if(verbose) message("Stage II: 4/4 complete")
if(verbose) message("Stage II running time: ", round((proc.time() - ts2)[3]), "s")
list(Pu = min(1, Pu), Pl = Pu-(Eu_int1+Eu_int0+Eu_indep))
}
result = tailprob(pstrct, nt$w, nthread = 4)
cat("P_U =", result$Pu, "Epsilon_U =", result$Pu-result$Pl, '\n')
result = tailprob(pstrct, 30.68302, nthread = 4)
cat("P_U =", result$Pu, "Epsilon_U =", result$Pu-result$Pl, '\n')
library(devtools)
library(roxygen2)
library(formatR)
tidy_source(arrow = TRUE, width.cutoff = 200, indent=2,
file = paste0(parentDir, "/Dropbox/Research/Program/AmericanGut/Rpackage/Rpackge_function_clean_temp.R"))
check(paste0(parentDir, "/Dropbox/Research/Program/AmericanGut/Rpackage/v1.2/phyloDM")) #Windows: 16.13s, Mac:
setwd(paste0(parentDir, "/Dropbox/Research/Program/AmericanGut/Rpackage/v1.2/phyloDM"))
document()
check(paste0(parentDir, "/Dropbox/Research/Program/AmericanGut/Rpackage/v1.2/phyloDM")) #Windows: 16.13s, Mac:
build(paste0(parentDir, "/Dropbox/Research/Program/AmericanGut/Rpackage/v1.2/phyloDM"))
